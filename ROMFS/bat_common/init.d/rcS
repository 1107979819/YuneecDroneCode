#!nsh
#
# BAT12 startup script.
#
#  NOTE: COMMENT LINES ARE REMOVED BEFORE STORED IN ROMFS.
#
# Serial map:
# /dev/ttyS0: GPS   (USART1)
# /dev/ttyS1: J11   (USART2)
# /dev/ttyS2: J7    (USART3)
# /dev/ttyS3: GB    (UART4)
# /dev/ttyS4: OFS   (USART6)
# /dev/ttyS5: RF    (UART7)
# /dev/ttyS6: DEBUG (UART8)

#
# Mount the procfs.
#
mount -t procfs /proc

#
# Start CDC/ACM serial driver
#
sercon

#
# Default to auto-start mode.
#
set MODE autostart

set LOG_FILE /fs/microsd/bootlog.txt

#
# Try to mount the microSD card.
#
# REBOOTWORK this needs to start after the flight control loop
if mount -t vfat /dev/mmcsd0 /fs/microsd
then
	echo "[i] microSD mounted: /fs/microsd"
 	if hardfault_log check
 	then
		if hardfault_log commit
		then
			hardfault_log reset
		fi
  else
 fi
else
	if mkfatfs /dev/mmcsd0
	then
		if mount -t vfat /dev/mmcsd0 /fs/microsd
		then
			echo "INFO  [init] MicroSD card formatted"
		else
			echo "ERROR [init] Format failed"
			set LOG_FILE /dev/null
		fi
	else
		set LOG_FILE /dev/null
	fi
fi

#
# Look for an init script on the microSD card.
# Disable autostart if the script found.
#
set FRC /fs/microsd/etc/rc.txt
if [ -f $FRC ]
then
	echo "INFO  [init] Executing script: $FRC"
	sh $FRC
	set MODE custom
fi
unset FRC

if [ $MODE == autostart ]
then

	#
	# Start the ORB (first app to start)
	#
	uorb start

	#
	# Load parameters
	#
	set PARAM_FILE /fs/microsd/params
	if mtd start
	then
		set PARAM_FILE /fs/mtd_params
	fi

	param select $PARAM_FILE
	if param load
	then
	else
		if param reset
		then
		fi
	fi

	#
	# Start system state indicator
	#
	if rgbled start
	then
	fi

#
# Set parameters and env variables for selected AUTOSTART
#
if param compare SYS_AUTOSTART 0
then
	param set SYS_AUTOSTART 6001
	param set SYS_AUTOCONFIG 1
fi

#
# Set AUTOCNF flag to use it in AUTOSTART scripts
#
if param compare SYS_AUTOCONFIG 1
then
	# Wipe out params except RC*
	param reset_nostart RC*
	set AUTOCNF yes
else
	set AUTOCNF no

	#
	# Release 1.4.0 transitional support:
	# set to old default if unconfigured.
	# this preserves the previous behaviour
	#
	if param compare BAT_N_CELLS 0
	then
		param set BAT_N_CELLS 3
	fi
fi

#
# Set default values
#
set VEHICLE_TYPE none
set MIXER none
set OUTPUT_MODE none
set PWM_OUT none
set PWM_RATE none
set PWM_DISARMED none
set PWM_MIN none
set PWM_MAX none
set FMU_MODE pwm
set MAV_TYPE none
set FAILSAFE none


sh /etc/init.d/rc.autostart

# If autoconfig parameter was set, reset it and save parameters
#
if [ $AUTOCNF == yes ]
then
	param set SYS_AUTOCONFIG 0
	param save
fi
unset AUTOCNF

#
# Set default output if not set
#
set OUTPUT_MODE fmu

gps start -d /dev/ttyS0

# waypoint storage
# REBOOTWORK this needs to start in parallel
if dataman start
then
fi

#
# Sensors System (start before Commander so Preflight checks are properly run)
#
sh /etc/init.d/rc.sensors

commander start

#
# Start CPU load monitor
#
load_mon start

# FIXME: for now we just want to make sure mavlink always runs with version 2,
# later move this to a proper place
param set MAV_PROTO_VER 2
# run mavlink on the Gimbal port
mavlink start -r 2000 -d /dev/ttyS3 -m config -b 38400


#
# Start primary output
#
set TTYS1_BUSY no

#
# Check if UAVCAN is enabled, default to it for ESCs
#
if param greater UAVCAN_ENABLE 2
then
	set OUTPUT_MODE uavcan_esc
fi

# If OUTPUT_MODE == none then something is wrong with setup and we shouldn't try to enable output
if [ $OUTPUT_MODE != none ]
then
	if [ $OUTPUT_MODE == uavcan_esc ]
	then
		if param compare UAVCAN_ENABLE 0
		then
			echo "OVERRIDING UAVCAN_ENABLE = 1" >> $LOG_FILE
			param set UAVCAN_ENABLE 1
		fi
	fi

	if [ $OUTPUT_MODE == fmu -o $OUTPUT_MODE == ardrone ]
	then
		if fmu mode_${FMU_MODE}
		then
		else
			echo "FMU start failed" >> $LOG_FILE
		fi

	fi

	if [ $OUTPUT_MODE == mkblctrl ]
	then
		set MKBLCTRL_ARG ""
		if [ $MKBLCTRL_MODE == x ]
		then
			set MKBLCTRL_ARG "-mkmode x"
		fi
		if [ $MKBLCTRL_MODE == + ]
		then
			set MKBLCTRL_ARG "-mkmode +"
		fi

		if mkblctrl $MKBLCTRL_ARG
		then
		else
			echo "MK start failed" >> $LOG_FILE
		fi
		unset MKBLCTRL_ARG
	fi
	unset MK_MODE

	if [ $OUTPUT_MODE == hil ]
	then
		if pwm_out_sim mode_pwm16
		then
		else
		fi
	fi

	#
	# Start IO or FMU for RC PPM input if needed
	#
	if [ $OUTPUT_MODE != fmu -a $OUTPUT_MODE != ardrone ]
	then
		if fmu mode_${FMU_MODE}
		then
		else
			echo "FMU mode_$FMU_MODE start failed" >> $LOG_FILE
		fi
	fi
fi


#

#
# Starting stuff according to UAVCAN_ENABLE value
#
if param greater UAVCAN_ENABLE 0
then
	if uavcan start
	then
	else
	fi
fi

if param greater UAVCAN_ENABLE 1
then
	if uavcan start fw
	then
	else
	fi
fi

#
# Optional drivers
#

# Sensors on the PWM interface bank

# Check for flow sensor - as it is a background task, launch it last
px4flow start &


set DEBUG_MODE no

if [ $LOG_FILE == /dev/null ]
then
	set DEBUG_MODE yes
fi


# Start USB shell if no microSD present, MAVLink else
if [ $DEBUG_MODE == yes ]
then
	# Try to get an USB console
	nshterm /dev/ttyACM0 &
else
	mavlink start -r 800000 -d /dev/ttyACM0 -m config -x
fi

#
# Logging
#
# check if we should increase logging rate for ekf2 replay message logging
if param greater EKF2_REC_RPL 0
then
	if param compare SYS_LOGGER 0
	then
		if sdlog2 start -r 500 -e -b 18 -t
		then
		fi
	else
		if logger start -r 500
		then
		fi
	fi
else
	if param compare SYS_LOGGER 0
	then
		if sdlog2 start -r 100 -a -b 9 -t
		then
		fi
	else
		if logger start -b 12 -t
		then
		fi
	fi
fi

#
# Fixed wing setup
#
if [ $VEHICLE_TYPE == fw ]
then
	if [ $MIXER == none ]
	then
		# Set default mixer for fixed wing if not defined
		set MIXER AERT
	fi

	if [ $MAV_TYPE == none ]
	then
		# Use MAV_TYPE = 1 (fixed wing) if not defined
		set MAV_TYPE 1
	fi

	param set MAV_TYPE $MAV_TYPE

	# Load mixer and configure outputs
	sh /etc/init.d/rc.interface

	# Start standard fixedwing apps
	sh /etc/init.d/rc.fw_apps
fi

#
# Multicopters setup
#
if [ $VEHICLE_TYPE == mc ]
then
	if [ $MIXER == none ]
	then
		echo "Mixer undefined"
	fi

	if [ $MAV_TYPE == none ]
	then
		# Use mixer to detect vehicle type
		if [ $MIXER == quad_x -o $MIXER == quad_+ ]
		then
			set MAV_TYPE 2
		fi
		if [ $MIXER == quad_w -o $MIXER == sk450_deadcat ]
		then
			set MAV_TYPE 2
		fi
		if [ $MIXER == quad_h ]
		then
			set MAV_TYPE 2
		fi
		if [ $MIXER == tri_y_yaw- -o $MIXER == tri_y_yaw+ ]
		then
			set MAV_TYPE 15
		fi
		if [ $MIXER == hexa_x -o $MIXER == hexa_+ ]
		then
			set MAV_TYPE 13
		fi
		if [ $MIXER == hexa_cox ]
		then
			set MAV_TYPE 13
		fi
		if [ $MIXER == octo_x -o $MIXER == octo_+ ]
		then
			set MAV_TYPE 14
		fi
		if [ $MIXER == octo_cox -o $MIXER == octo_cox_w ]
		then
			set MAV_TYPE 14
		fi
		if [ $MIXER == coax ]
		then
			set MAV_TYPE 3
		fi
	fi

	# Still no MAV_TYPE found
	if [ $MAV_TYPE == none ]
	then
		echo "Unknown MAV_TYPE"
		param set MAV_TYPE 2
	else
		param set MAV_TYPE $MAV_TYPE
	fi

	# Load mixer and configure outputs
	sh /etc/init.d/rc.interface

	# Start standard multicopter apps
	sh /etc/init.d/rc.mc_apps
fi

#
# VTOL setup
#
if [ $VEHICLE_TYPE == vtol ]
then
	if [ $MIXER == none ]
	then
		echo "VTOL mixer undefined"
	fi

	if [ $MAV_TYPE == none ]
	then
		# Use mixer to detect vehicle type
		if [ $MIXER == caipirinha_vtol ]
		then
			set MAV_TYPE 19
		fi
		if [ $MIXER == firefly6 ]
		then
			set MAV_TYPE 21
		fi
		if [ $MIXER == quad_x_pusher_vtol ]
		then
			set MAV_TYPE 22
		fi
	fi

	# Still no MAV_TYPE found
	if [ $MAV_TYPE == none ]
	then
		echo "Unknown MAV_TYPE"
		param set MAV_TYPE 19
	else
		param set MAV_TYPE $MAV_TYPE
	fi

	# Load mixer and configure outputs
	sh /etc/init.d/rc.interface

	# Start standard vtol apps
	sh /etc/init.d/rc.vtol_apps
fi

#
# Rover setup
#
if [ $VEHICLE_TYPE == rover ]
then
	# 10 is MAV_TYPE_GROUND_ROVER
	set MAV_TYPE 10

	# Load mixer and configure outputs
	sh /etc/init.d/rc.interface

	# Start standard rover apps
	sh /etc/init.d/rc.axialracing_ax10_apps

	param set MAV_TYPE 10
fi

#
# For snapdragon, we need a passthrough mode
# Do not run any mavlink instances since we need the serial port for
# communication with Snapdragon.
#
if [ $VEHICLE_TYPE == passthrough ]
then
	mavlink stop-all
	commander stop

	# Stop multicopter attitude controller if it is running, the controls come
	# from Snapdragon.
	if mc_att_control stop
	then
	fi

	# Start snapdragon interface on serial port.
	if ver hwcmp PX4FMU_V2
	then
		# On Pixfalcon use the standard telemetry port (Telem 1).
		snapdragon_rc_pwm start -d /dev/ttyS1
		px4io start
	fi

	if ver hwcmp PX4FMU_V4
	then
		# On Pixracer use Telem 2 port (TL2).
		snapdragon_rc_pwm start -d /dev/ttyS2
		fmu mode_pwm4
	fi

	pwm failsafe -c 1234 -p 900
	pwm disarmed -c 1234 -p 900

	# Arm straightaway.
	pwm arm
	# Use 400 Hz PWM on all channels.
	pwm rate -a -r 400
fi

unset MIXER
unset MAV_TYPE
unset OUTPUT_MODE

#
# Start the navigator
#
navigator start

#
# Generic setup (autostart ID not found)
#
if [ $VEHICLE_TYPE == none ]
then
	echo "No autostart ID found"
fi

# Start any custom addons
set FEXTRAS /fs/microsd/etc/extras.txt
if [ -f $FEXTRAS ]
then
	echo "Addons script: $FEXTRAS"
	sh $FEXTRAS
fi
unset FEXTRAS

if ver hwcmp CRAZYFLIE
then
	# CF2 shouldn't have an sd card
else

	# Run no SD alarm
	if [ $LOG_FILE == /dev/null ]
	then
	fi

fi

# End of autostart
fi

# There is no further script processing, so we can free some RAM
# XXX potentially unset all script variables.
unset TUNE_ERR

# Boot is complete, inform MAVLink app(s) that the system is now fully up and running
mavlink boot_complete

if [ $EXIT_ON_END == yes ]
then
	echo "NSH exit"
	exit
fi
unset EXIT_ON_END
